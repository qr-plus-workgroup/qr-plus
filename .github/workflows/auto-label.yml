name: Auto Label Issues

on:
  issues:
    types: [opened, edited]

permissions:
  issues: write

jobs:
  auto-label:
    runs-on: ubuntu-latest
    steps:
      - name: Add priority label based on content
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const body = (issue.body || '').toLowerCase();
            const title = (issue.title || '').toLowerCase();
            const combined = title + ' ' + body;

            // Check if priority label already exists
            const hasPriority = issue.labels.some(label =>
              label.name.startsWith('priority:')
            );

            if (!hasPriority) {
              // Add priority: medium as default if no priority set
              // Moderators can change this during triage
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['priority: medium']
              });
            }

            // Add status: investigating for new issues
            const hasStatus = issue.labels.some(label =>
              label.name.startsWith('status:')
            );

            if (!hasStatus) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['status: investigating']
              });
            }

      - name: Add comment for first-time template usage
        uses: actions/github-script@v7
        if: github.event.action == 'opened'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;

            // Check if issue has type label from template
            const hasType = issue.labels.some(label =>
              label.name.startsWith('type:')
            );

            if (!hasType) {
              // Issue was created without using a template
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `ðŸ‘‹ Thank you for creating this issue!\n\nWe noticed this issue wasn't created using one of our templates. Using templates helps us gather all the necessary information.\n\n**Please consider:**\n- Closing this issue\n- Creating a new one using the appropriate template: [Choose Template](https://github.com/${context.repo.owner}/${context.repo.repo}/issues/new/choose)\n\nOr, if you prefer to keep this issue open, please provide:\n- Clear description of the problem\n- Specification version\n- Expected vs actual behavior (for bugs)\n- Use case context\n\nA moderator will review and add appropriate labels.`
              });
            }
